* My personal notes for swiss-army-knife-hs
  These are my personal notes for this
  project. They are not promised to be
  up-to-date or even accurate. They are only
  intended for myself and no one else. Mispellings,
  non-PC references, and all.

  You may find something useful here, but it is not gauranteed.
** Nothing to see here. Move it along. 
   + To be honest, I am so tempted to insert something political here, but
     really that would go against my core principles. Politics does not
     usually belong in software development. Period. So as I said: Nothing to see here.
     Move it along. And if you have a big achey 
     problem with that, too bad.
** Just ported this from the Elixir version. Elixir is not good for
   command-line utilities. It is great for writing daemons, however,
   with its all-mighty OTP.
** I need to set this up in the AUR.
** Will compile with GHC2021, but not GHC2024
   I will address this problem later, but is not a show-stopper.
** Release instructions for the AUR
   + update the version and release numbers in both:
     + PKGBUILD
     + .SRCINFO
     + as well as in the cabal file
     + makepkg wants cabal-install, not cabal.
   + 
** I am an idiot! I did not put a --version option. Adding that now.
   + I added it as a new command. Later we will fix this TODO
** Use of head instead of listToMaybe. TODO
** Network Controls
   I am creating two new knives to do these commands:
   + systemctl start systemd-networkd.socket
      systemctl start systemd-networkd.service
   + systemctl start NetworkManager.service
   As such, one might make the argument that I should apply DRY
   to the two knives, but I am not seeing any strong benefit
   form that. As shuch, every knife shall be independent of the other
   knives code-wise.One knife is allowed to invoke another knife, but
   otherwise functionality shall remain separate.
   + Currently, there is nothing in place to easily allow one knife
     to invoke another one without passing in the options, but then
     that should be fine.
** Version numbers
   X: Major version (breaking changes)
   Y: Minor version (new features)
   Z: Patch version (bug fixes)
   W: Build or revision number (specific iteration)
*** This is now the standard for this project

